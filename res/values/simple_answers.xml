<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string-array name="simple_answers">
        <item>Android is an open platfrom for mobile device, which consist OS,Midle Ware, Applicatin Key</item>
       <item >he Google Android SDK is a toolset that developers need in order to write apps on Android enabled devices. It contains a graphical interface that emulates an Android driven handheld environment, allowing them </item>
        <item>The Application Framework layer provides many  higher-level services to applications in the form of Java classes.Application developers are allowed to make use of these services in their applications.</item>
        <item>You will find all the Android application at the top layer. You will write your  application to be installed on this layer only. Examples of such applications are Contacts Books, Browser, Games etc.</item>
        <item>An activity represents one screen with a user interface. as an example, AN email application might need one activity that shows a listing of recent emails, Another activity to compose an email, and another activity for reading emails. If AN application has over one activity, then one in all them should be marked as the activity that’s presented once the appliance is launched.</item>
        <item>Intent is basically a message that is passed between components (such as Activities, Services, Broadcast Receivers, and Content Providers). So, it is almost equivalent to parameters passed to API calls. The fundamental differences between API calls and intents’ way of invoking components are:"\n\n" * API calls are synchronous while intent-based invocations are asynchronous."\n\n" * API calls are compile time binding while intent-based calls are run-time binding.</item>
        <item>Explicitly starting new activities in android application. Explicitly select select an Activity class to start, create a new Intent, specifying the current application. Context and activity class to launch."\n\n"Intent intent = new Intent(MyActivity.this, MySecondAcitivity.class);"\n"startActivity(intent);</item>
        <item>Broadcast Intents are used to notify listeners of system or application events, extending the even-drivers programming model between applications."\n\n"Broadcast Intents helps make your application more open; by broadcasting an event using an Intent you let yourself and third-party developers react to events without having to modify your original application."\n\n"Android uses broadcast Intents extensively to broadcast system events like battery-charging levels, network connections, incoming calls and Boot OS.</item>
        <item>The following are the exceptions that are supported by android:"\n\n"1. InflateException : When an error conditions are occurred, this exception thrown."\n\n"2. Surface.OutOfResourceException : When a surface is not created or ,this exception thrown."\n\n"3.Surface.Holder.BadSurfaceTypeException :This exception is thrown form the lockCanvas() method, when invoked on a whose is SURFACE_TYPE_PUSH_BUFFEERS"\n\n"4.WindowManager.BadTokenException: This exception is thrown at the time of trying to add view an invalid WindowManager.LayoutParamstoken</item>
        <item>The Pending Intent class provides a mechanism for creating Intents that can be fired by another application a later time. A pending Intent is commonly used to package an Intent will be fired in response to a future event, such as a widget view being clicked or a Notification being selected from the notification panel.</item>
        <item>.apk extension for an Android Package file, which typically contains all of the files related to a single Android application. The file itself is a compressed collection of an AndroidMainfest.xml file, application code (.dex files) , resource file and other files. A project is compiled into a single .apk file.</item>
        <item>Android programs are complied into .dex (Dalvik Executable) files, which are in turn zipped into a single .apk file on the device. .dex file can be created by automatically translating compiled applications written in the java programming language.</item>
        <item>In Android application each Activity node supports intent-filter child tags that define the Intents that can be used to start the Activity.Android OS uses filters to pinpoint the set of Activities, Services, and Broadcast receivers that can handle the Intent with help of specific set of action, categories, data scheme related to an Intent. you’ll use  in the within the manifest file to list down actions, categories and data types associated with any activity, service, or broadcast receiver.</item>
        <item>The name of Android’s Virtual machine.Traditional JAVA Virtual machine (VM)  as Java ME (Java Mobile Edition), Android uses its own custom VM designed to ensure that multiple instances run efficiently on a single device."\n\n"The Dalvik VM uses the device’s underlying Linux kernel to handle low-level functionality including security, threading and process and memory management."\n\n"The Dalvik VM is an interpreter only virtual lmachine that executes file in the Dalvik Executable (.dex) format, a format that is optimized for efficient storage and memory mappable execution. The Virtual machine is register-based and it can run classed compiled by a java language compiler that have been transformed into its native format using the included “dx” tool.</item>
        <item>A Fragment represents a behavior or a portion of user interface  in a activity you can combine multiple fragments in a single activity to build a multi-pane UI and reuse a fragment activities."\n\n"Fragment is a part of an activity, which contributes its own UI to that activity. Fragment thought like a sub activity.An activity may contain zero or more number of fragments based on screen size.One more most important point of fragment we can reuse fragment in multiple activities. We can’t use fragment independently. It should always part of an activity.</item>
        <item>Layout managers are extensions of the ViewGroup class used to position child controls for your UI. Layouts can b e nested, letting you create complex interfaces using a combination of layouts.</item>
        <item>No. you can also program Android app in C/C++ and assembly NDK (Native Development Kit)."\n\n"The Android Native Development Kit (NDK) is the tool you will be using for C++ development on Android platform. The Android NDK is a companion toolset for the Android Software Development Kit (SDK), designed to augment the Android SDK to allow developers to implement and embed performance-critical portions of their applications using machine code-generating programming languages like C, C++, and Assembly.</item>
        <item>There is 4 type categories in Android application:"\n"1. Foreground : An application that’s useful only when it’s in the foreground and is effectively suspended when it’s not visible. Games and Map mashups  are common example."\n\n"2. Background : An application with limited interaction that, apart from when being configured , spends most of its lifetime hidden. Examples include call screening applications and SMS auto-responders."\n\n"3. Intermittent : Expects some interactivity but does most of its work in the background. often these applications will be set up and then run silently, notifying users when appropriate. A common example would be a media player."\n\n"4. Widget : Some Application are represented only as a home-screen widget. </item>
        <item>Android Toast is a small view that contains a brief message for the user. The message doesn’t persist because it’s usually available for only a few seconds – a toast never receives focus. The Task Reminder app uses a toast not for reminding the user but uses it instead for notifying the user when her activity has been saved.</item>
        <item>The <b>NotificationManager</b> class notifies a user that events have taken place. They can appear on the status bar at the top of the screen. Notification items can contain various views and are identified by icons you provide. The user can slide down the notification list to view notifications. The Task Reminder application uses the NotificationManager class to handle alarms.</item>
        <item>Views are the UI controls that display data and provide user interaction. All UI controls, including the layout classes, are derived for View. Android provides several layout classes, called View Groups, which can contain multiple Views to help you layout your UIs. Fragments are used to encapsulate segments of your UI, making it simple to create dynamic interfaces that can be rearranged to optimize your layouts for different screen sizes and orientations.</item>
        <item >Orientation, which can be set using setOrientation(), dictates if the LinearLayout is represented as a row or as a column. Values are set as either HORIZONTAL or VERTICAL.</item>
   		<item >The use of XML-based layouts provides a consistent and somewhat standard means of setting GUI definition format. In common practice, layout details are placed in XML files while other items are placed in source files.</item>
        <item >AIDL supports charSequence, list, map, string, and all types of native java data types.</item>
        </string-array>

</resources>